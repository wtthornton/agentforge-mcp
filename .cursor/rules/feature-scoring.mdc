# Feature Scoring - Agent OS Integration

## ðŸš¨ MANDATORY: Feature Scoring Framework
**ALWAYS** score all features before development using the 4-dimension framework from `.agent-os/standards/feature-scoring.md`.

### ðŸ“Š Required Scoring Dimensions
- **Business Impact (1-10)**: How much does this improve Agent-OS effectiveness?
- **Developer Productivity (1-10)**: How much faster/better will developers code with this feature?
- **Implementation Complexity (1-10)**: How difficult is this to build and maintain?
- **Adoption Likelihood (1-10)**: How likely are developers to actively use this feature?

### ðŸŽ¯ Phase Classification Criteria
- **Phase 1 (Immediate)**: Developer Productivity â‰¥ 8/10 OR Combined Score â‰¥ 32/40
- **Phase 2 (Next)**: Developer Productivity â‰¥ 7/10 OR Combined Score â‰¥ 28/40
- **Phase 3+ (Future)**: All other features requiring executive approval

### ðŸš« Automatic Elimination
Features meeting ANY of these criteria should be deferred or eliminated:
- **Developer Productivity < 6/10** - No significant coding speed improvement
- **Combined Score < 24/40** - Below 60% overall value threshold
- **Implementation Complexity â‰¥ 8/10 AND Developer Productivity â‰¤ 6/10** - High effort, low productivity impact
- **Adoption Likelihood â‰¤ 4/10** - Unlikely to be used by developers

## ðŸ“‹ Feature Scoring Process

### 1. Initial Scoring
- **Who**: Product owner + lead developer + 2 team members
- **When**: During feature planning, before development estimation
- **Format**: Individual scoring followed by consensus discussion

### 2. Documentation Requirements
**ALWAYS** use `.agent-os/templates/feature-scoring-template.md`:
```markdown
## Feature: [Feature Name]

### Scoring
- **Business Impact**: [1-10] - [Justification]
- **Developer Productivity**: [1-10] - [Justification]
- **Implementation Complexity**: [1-10] - [Justification]
- **Adoption Likelihood**: [1-10] - [Justification]

### Phase Classification
- **Combined Score**: [X]/40
- **Phase**: [1/2/3+]
- **Decision**: [Proceed/Defer/Eliminate]
- **Justification**: [Clear reasoning]
```

### 3. Scoring Review
- **Frequency**: Bi-weekly during sprint planning
- **Purpose**: Re-evaluate features based on new information or changing priorities
- **Outcome**: Confirm, adjust, or eliminate features from roadmap

### 4. Post-Implementation Review
- **When**: 30 days after feature release
- **Purpose**: Validate scoring accuracy and improve future scoring
- **Metrics**: Actual adoption rates, productivity improvements, developer feedback

## ðŸ”§ Tools Integration

### Feature Scoring Tools
- **Template**: `.agent-os/templates/feature-scoring-template.md`
- **Validation**: `.agent-os/tools/feature-scoring/`
- **Documentation**: `.agent-os/standards/feature-scoring.md`

### Compliance Integration
**ALWAYS** run compliance check after feature scoring:
```bash
node .agent-os/tools/compliance-checker.js --detailed
```

## ðŸ“ˆ Success Metrics
- **100% Feature Scoring Compliance**: All features scored before development
- **Phase Classification Accuracy**: 90%+ features implemented in correct phase
- **Scoring Validation**: Post-implementation review within 30 days
- **Documentation Quality**: Complete scoring justification for all dimensions

## ðŸš« Project Constraints
- **NO AI suggestion features** - Static analyzer only
- **Core focus**: logging, reporting, monitoring
- **Performance**: P95 â‰¤200ms backend, TTI â‰¤1.8s frontend

## âœ… Quality Gates
- **Scoring Completion**: 100% features scored before development
- **Phase Compliance**: Features implemented in correct phase
- **Documentation**: Complete scoring justification documented
- **Review Process**: Post-implementation review completed
description:
globs:
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
