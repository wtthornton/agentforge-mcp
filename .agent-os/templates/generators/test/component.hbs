import { describe, it, expect, beforeEach{{#if options.typescript}}, vi{{/if}} } from 'vitest';
import { renderWithProviders, screen, userEvent, waitFor } from '@testing/utils/render-helpers';
import { {{options.target}} } from '@/components/{{options.target}}';
{{#if options.typescript}}
import type { {{options.target}}Props } from '@/components/{{options.target}}';
{{/if}}

describe('{{options.target}}', () => {
  {{#if options.typescript}}
  const defaultProps: {{options.target}}Props = {
    // Add default props
  };
  {{else}}
  const defaultProps = {
    // Add default props
  };
  {{/if}}

  beforeEach(() => {
    vi.clearAllMocks();
  });

  const renderComponent = (props = {}) => {
    return renderWithProviders(
      <{{options.target}} {...defaultProps} {...props} />
    );
  };

  describe('rendering', () => {
    it('should render successfully', () => {
      renderComponent();
      
      expect(screen.getByText('{{options.target}} Component')).toBeInTheDocument();
    });

    it('should apply correct CSS class', () => {
      renderComponent();
      
      const element = screen.getByText('{{options.target}} Component').parentElement;
      expect(element).toHaveClass('{{kebabCase options.target}}');
    });
  });

  describe('user interactions', () => {
    it('should handle click events', async () => {
      const handleClick = vi.fn();
      renderComponent({ onClick: handleClick });
      
      const button = screen.getByRole('button');
      await userEvent.click(button);
      
      expect(handleClick).toHaveBeenCalledTimes(1);
    });
  });

  describe('props', () => {
    it('should handle prop changes', () => {
      const { rerender } = renderComponent({ title: 'Initial' });
      
      expect(screen.getByText('Initial')).toBeInTheDocument();
      
      rerender(<{{options.target}} {...defaultProps} title="Updated" />);
      
      expect(screen.getByText('Updated')).toBeInTheDocument();
    });
  });

  describe('accessibility', () => {
    it('should have proper ARIA attributes', () => {
      renderComponent();
      
      // Add accessibility tests
    });
  });
});