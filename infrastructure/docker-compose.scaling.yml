# AgentForge Horizontal Scaling Configuration
# Docker Compose for load-balanced, horizontally scaled deployment

version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:1.24-alpine
    container_name: agentforge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Metrics endpoint
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - mcp-1
      - mcp-2
      - mcp-3
      - frontend-1
      - frontend-2
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Instances
  backend-1:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: agentforge-backend-1
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8081
      - DB_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-1
      - JAVA_OPTS=-Xmx1g -Xms512m
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - backend-logs-1:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-2:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: agentforge-backend-2
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8081
      - DB_HOST=postgres-replica-1
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-2
      - JAVA_OPTS=-Xmx1g -Xms512m
    depends_on:
      - postgres-replica-1
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - backend-logs-2:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-3:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: agentforge-backend-3
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8081
      - DB_HOST=postgres-replica-2
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-3
      - JAVA_OPTS=-Xmx768m -Xms384m  # Smaller instance
    depends_on:
      - postgres-replica-2
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - backend-logs-3:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-backup:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: agentforge-backend-backup
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8081
      - DB_HOST=postgres-primary
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-backup
      - JAVA_OPTS=-Xmx512m -Xms256m  # Minimal backup instance
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - backend-logs-backup:/app/logs
    profiles:
      - backup  # Only start with --profile backup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 60s
      timeout: 15s
      retries: 2
      start_period: 90s

  # MCP Server Instances
  mcp-1:
    build:
      context: ../mcp-server
      dockerfile: Dockerfile
    container_name: agentforge-mcp-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres-primary
      - REDIS_URL=redis://redis-cluster:6379
      - INSTANCE_ID=mcp-1
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - mcp-logs-1:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-2:
    build:
      context: ../mcp-server
      dockerfile: Dockerfile
    container_name: agentforge-mcp-2
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres-replica-1
      - REDIS_URL=redis://redis-cluster:6379
      - INSTANCE_ID=mcp-2
    depends_on:
      - postgres-replica-1
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - mcp-logs-2:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-3:
    build:
      context: ../mcp-server
      dockerfile: Dockerfile
    container_name: agentforge-mcp-3
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres-replica-2
      - REDIS_URL=redis://redis-cluster:6379
      - INSTANCE_ID=mcp-3
    depends_on:
      - postgres-replica-2
      - redis-cluster
    networks:
      - agentforge-network
    volumes:
      - mcp-logs-3:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Instances
  frontend-1:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: agentforge-frontend-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
      - INSTANCE_ID=frontend-1
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend-2:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: agentforge-frontend-2
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
      - INSTANCE_ID=frontend-2
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Cluster
  postgres-primary:
    image: postgres:17-alpine
    container_name: agentforge-postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentforge
      - POSTGRES_USER=agentforge
      - POSTGRES_PASSWORD=agentforge
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replication123
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - agentforge-network
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentforge -d agentforge"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres-replica-1:
    image: postgres:17-alpine
    container_name: agentforge-postgres-replica-1
    restart: unless-stopped
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replication123
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres-replica-1-data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  postgres-replica-2:
    image: postgres:17-alpine
    container_name: agentforge-postgres-replica-2
    restart: unless-stopped
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replication123
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres-replica-2-data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    container_name: agentforge-redis-cluster
    restart: unless-stopped
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --cluster-announce-hostname redis-cluster
    ports:
      - "6379:6379"
    volumes:
      - redis-cluster-data:/data
    networks:
      - agentforge-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: agentforge-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - agentforge-network
    depends_on:
      - nginx
      - backend-1
      - backend-2
      - backend-3

  grafana:
    image: grafana/grafana:10.2.0
    container_name: agentforge-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - agentforge-network
    depends_on:
      - prometheus

  # Auto-scaling service
  autoscaler:
    build:
      context: ./autoscaler
      dockerfile: Dockerfile
    container_name: agentforge-autoscaler
    restart: unless-stopped
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROMETHEUS_URL=http://prometheus:9090
      - SCALE_UP_THRESHOLD=80
      - SCALE_DOWN_THRESHOLD=30
      - MIN_REPLICAS=2
      - MAX_REPLICAS=6
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - agentforge-network
    depends_on:
      - prometheus
    profiles:
      - autoscaling

networks:
  agentforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-primary-data:
  postgres-replica-1-data:
  postgres-replica-2-data:
  redis-cluster-data:
  prometheus-data:
  grafana-data:
  nginx-logs:
  backend-logs-1:
  backend-logs-2:
  backend-logs-3:
  backend-logs-backup:
  mcp-logs-1:
  mcp-logs-2:
  mcp-logs-3: