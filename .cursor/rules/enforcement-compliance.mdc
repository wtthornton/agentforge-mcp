# Enforcement & Compliance - Agent OS Integration

## üö® MANDATORY: Standards Enforcement Rules
**ALWAYS** follow these enforcement rules from `.agent-os/standards/enforcement.md`:

### 1. Feature Scoring Framework (MANDATORY)
**ALWAYS** score all features before development using the 4-dimension framework:
- **Business Impact (1-10)**: How much does this improve Agent-OS effectiveness?
- **Developer Productivity (1-10)**: How much faster/better will developers code with this feature?
- **Implementation Complexity (1-10)**: How difficult is this to build and maintain?
- **Adoption Likelihood (1-10)**: How likely are developers to actively use this feature?

### 2. Technology Stack Validation (MANDATORY)
**ALWAYS** validate technology choices against Context7 before implementation:
- [ ] Technology choices validated against Context7 documentation
- [ ] Current versions confirmed via Context7
- [ ] Best practices verified via Context7
- [ ] Compatibility checked across components

### 3. Task Tracking Standards (MANDATORY)
**ALWAYS** update tasks.md file immediately after completing any subtask:
- **Immediate Updates**: Mark completed subtasks with `[x]` immediately after completion
- **NEVER** wait until the end of a session to update task progress
- **ALWAYS** add progress notes for completed sections
- **ALWAYS** update completion percentages and overall progress
- **ALWAYS** document session summaries with completed tasks and next priorities

### 4. Lessons Learned Capture (MANDATORY)
**ALWAYS** capture lessons learned for significant tasks:
- **Required Structure**: Use `.agent-os/templates/lessons-learned-template.md`
- **Capture Frequency**: After each major task completion
- **Content Requirements**: Include patterns, anti-patterns, and implementation guidelines

### 5. Automatic Compliance Checking (MANDATORY)
**ALWAYS** run compliance check after every subtask completion:
```bash
# After completing any subtask:
node .agent-os/tools/compliance-checker.js --detailed

# Expected output:
# ‚úÖ Compliance Score: 95%
# ‚úÖ Standards Adherence: 100%
# ‚úÖ Code Quality: Excellent
# ‚úÖ No new violations detected
```

## ‚úÖ Compliance Requirements

### Required Compliance Score: ‚â•85%

### Compliance Check Integration
```bash
# Quick compliance check
node .agent-os/tools/compliance-checker.js

# Detailed compliance check
node .agent-os/tools/compliance-checker.js --detailed

# Compliance validation
node .agent-os/tools/validation-suite.js
```

### Compliance Failure Protocol
- **If compliance score drops below 85%**: Fix violations immediately
- **If new violations detected**: Address before next subtask
- **If standards violations found**: Document and resolve as priority
- **If quality issues identified**: Refactor code to meet standards

## üîß Enforcement Tools

### Primary Tools
- **Compliance Checker**: `.agent-os/tools/compliance-checker.js`
- **Validation Suite**: `.agent-os/tools/validation-suite.js`
- **Refactoring Validator**: `.agent-os/tools/refactoring-validator.js`
- **Agent OS CLI**: `.agent-os/tools/agent-os-cli.js`

### Validation Tools
- **Product Validator**: `.agent-os/tools/product-validator.js`
- **Real-time Monitor**: `.agent-os/tools/real-time-monitor.js`
- **Statistical Analysis**: `.agent-os/tools/statistical-analysis.js`

## üìã Enforcement Checklist

### Pre-Development
- [ ] Feature scored using 4-dimension framework
- [ ] Technology stack validated against Context7
- [ ] Compliance checker run (baseline established)
- [ ] Relevant standards reviewed

### During Development
- [ ] Tasks.md updated immediately after each subtask
- [ ] Compliance checker run after each subtask
- [ ] Standards followed throughout development
- [ ] Lessons learned captured for significant work

### Post-Development
- [ ] Final compliance check run
- [ ] Compliance score ‚â•85% achieved
- [ ] All violations addressed
- [ ] Lessons learned documented
- [ ] Quality gates passed

## üö´ Project Constraints
- **NO AI suggestion features** - Static analyzer only
- **Core focus**: logging, reporting, monitoring
- **Performance**: P95 ‚â§200ms backend, TTI ‚â§1.8s frontend

## üìä Quality Gates
- **Code Quality**: ‚â§5 TODO items per service
- **Performance**: TTI ‚â§1.8s frontend, P95 ‚â§150ms backend
- **Security**: 0 vulnerabilities, 100% compliance
- **Architecture**: Controller ‚Üí Service ‚Üí Repository pattern enforced
- **Compliance**: ‚â•85% compliance score maintained

## üîç Compliance Verification
**ALWAYS** run after changes:
```bash
node .agent-os/tools/compliance-checker.js --detailed
```

**Required Score**: ‚â•85%
description:
globs:
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
