version: '3.8'

services:
  # Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:1.25-alpine
    container_name: agentforge-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/prod/ssl:/etc/nginx/ssl:ro
      - ./nginx/prod/conf.d:/etc/nginx/conf.d:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - frontend
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services (Load Balanced)
  backend-1:
    build:
      context: ../../backend
      dockerfile: Dockerfile.prod
    container_name: agentforge-backend-1
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-prod:5432/agentforge_prod
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_REDIS_HOST=redis-prod
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SERVER_PORT=8081
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  backend-2:
    build:
      context: ../../backend
      dockerfile: Dockerfile.prod
    container_name: agentforge-backend-2
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-prod:5432/agentforge_prod
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_REDIS_HOST=redis-prod
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SERVER_PORT=8081
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Frontend Service
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    container_name: agentforge-frontend
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://${DOMAIN_NAME}/api
      - VITE_APP_VERSION=${APP_VERSION}
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # MCP Server
  mcp-server:
    build:
      context: ../../mcp-server
      dockerfile: Dockerfile.prod
    container_name: agentforge-mcp-server
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres-prod:5432/agentforge_prod
      - REDIS_URL=redis://redis-prod:6379
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Production PostgreSQL
  postgres-prod:
    image: postgres:17-alpine
    container_name: agentforge-postgres-prod
    environment:
      - POSTGRES_DB=agentforge_prod
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres/prod/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/prod/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - /var/log/postgresql:/var/log/postgresql
    networks:
      - agentforge-prod
    restart: unless-stopped
    command: 
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d agentforge_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Production Redis
  redis-prod:
    image: redis:7.2-alpine
    container_name: agentforge-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_prod_data:/data
      - ./redis/prod/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Production Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: agentforge-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prod:/etc/prometheus
      - prometheus_prod_data:/prometheus
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.0
    container_name: agentforge-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/prod/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/prod/dashboards:/var/lib/grafana/dashboards
    networks:
      - agentforge-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: agentforge-loki-prod
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/prod:/etc/loki
      - loki_prod_data:/tmp/loki
    networks:
      - agentforge-prod
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: agentforge-promtail-prod
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/prod:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - agentforge-prod
    restart: unless-stopped

networks:
  agentforge-prod:
    driver: bridge
    name: agentforge-production

volumes:
  postgres_prod_data:
    name: agentforge_postgres_prod_data
  redis_prod_data:
    name: agentforge_redis_prod_data
  prometheus_prod_data:
    name: agentforge_prometheus_prod_data
  grafana_prod_data:
    name: agentforge_grafana_prod_data
  loki_prod_data:
    name: agentforge_loki_prod_data