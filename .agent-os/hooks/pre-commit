#!/bin/bash

# Agent-OS Pre-commit Hook
# This hook runs validation checks before allowing commits

set -e

echo "üîç Running Agent-OS pre-commit checks..."

# Fast checks: quick environment and repo readiness
echo "‚ö° Running Agent-OS fast checks..."
if ! node .agent-os/tools/fast-checks.cjs; then
  echo -e "${RED}‚ùå Fast checks failed${NC}"
  exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo -e "${RED}‚ùå Not in a git repository${NC}"
  exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Run TypeScript type checking
echo "üìò Running TypeScript type check..."
if npm run type-check > /dev/null 2>&1; then
  echo -e "${GREEN}‚úÖ TypeScript types are valid${NC}"
else
  echo -e "${RED}‚ùå TypeScript type errors found${NC}"
  echo "Run 'npm run type-check' to see details"
  exit 1
fi

# Run ESLint on staged files
echo "üîß Running ESLint..."
STAGED_TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)
if [ -n "$STAGED_TS_FILES" ]; then
  if npx eslint $STAGED_TS_FILES --quiet; then
    echo -e "${GREEN}‚úÖ ESLint passed${NC}"
  else
    echo -e "${RED}‚ùå ESLint errors found${NC}"
    echo "Run 'npm run lint' to see details"
    exit 1
  fi
fi

# Validate imports
echo "üì¶ Validating imports..."
if npm run lint:imports > /dev/null 2>&1; then
  echo -e "${GREEN}‚úÖ Import validation passed${NC}"
else
  echo -e "${YELLOW}‚ö†Ô∏è  Import issues found${NC}"
  echo "Run 'npm run lint:imports' to see details"
fi

# Validate test mocks
echo "üß™ Validating test mocks..."
STAGED_TEST_FILES=$(echo "$STAGED_FILES" | grep -E '\.(test|spec)\.(ts|tsx)$' || true)
if [ -n "$STAGED_TEST_FILES" ]; then
  if npm run validate:mocks -- $STAGED_TEST_FILES > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Mock validation passed${NC}"
  else
    echo -e "${RED}‚ùå Mock validation errors found${NC}"
    echo "Run 'npm run validate:mocks' to see details"
    exit 1
  fi
fi

# Run tests for changed files
echo "üß™ Running tests for changed files..."
if npm run test:changed -- --run > /dev/null 2>&1; then
  echo -e "${GREEN}‚úÖ Tests passed${NC}"
else
  echo -e "${RED}‚ùå Tests failed${NC}"
  echo "Run 'npm run test:changed' to see details"
  exit 1
fi

# Check for console.log statements
echo "üîç Checking for console.log statements..."
CONSOLE_LOGS=$(echo "$STAGED_FILES" | xargs grep -l "console\.log" 2>/dev/null || true)
if [ -n "$CONSOLE_LOGS" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Found console.log statements in:${NC}"
  echo "$CONSOLE_LOGS"
  echo "Consider removing or using proper logging"
fi

# Format staged files
echo "üíÖ Formatting staged files..."
STAGED_FORMAT_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx|json|md|css|scss)$' || true)
if [ -n "$STAGED_FORMAT_FILES" ]; then
  npx prettier --write $STAGED_FORMAT_FILES
  git add $STAGED_FORMAT_FILES
  echo -e "${GREEN}‚úÖ Files formatted${NC}"
fi

# Check bundle size (if applicable)
if [ -f "package.json" ] && grep -q "size-limit" package.json; then
  echo "üìä Checking bundle size..."
  if npm run size > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Bundle size within limits${NC}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Bundle size exceeds limits${NC}"
    echo "Run 'npm run size' to see details"
  fi
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0