name: CI/CD Production Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: agentforge

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run AgentForge Security Enhancement Service
        run: |
          cd .agent-os/tools
          node security-enhancement-service.cjs
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: .agent-os/reports/security/

  # Code Quality and Compliance
  quality-compliance:
    name: Quality & Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Agent-OS compliance check
        run: |
          node .agent-os/tools/compliance-checker.js --detailed
          
      - name: Run analytics service
        run: |
          node .agent-os/tools/advanced-analytics-service.cjs

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: .agent-os/reports/

  # Backend Testing and Build
  backend-test-build:
    name: Backend Test & Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agentforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run backend tests
        working-directory: backend
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/agentforge_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
        run: |
          mvn clean test -B
          mvn jacoco:report

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: backend/target/surefire-reports/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/target/site/jacoco/

      - name: Build backend
        working-directory: backend
        run: mvn clean package -DskipTests -B

      - name: Cache backend artifact
        uses: actions/cache@v3
        with:
          path: backend/target/*.jar
          key: backend-${{ github.sha }}

  # Frontend Testing and Build
  frontend-test-build:
    name: Frontend Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: frontend/coverage/

      - name: Build frontend
        working-directory: frontend
        env:
          NODE_ENV: production
        run: npm run build

      - name: Cache frontend artifact
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: frontend-${{ github.sha }}

  # MCP Server Testing and Build
  mcp-test-build:
    name: MCP Server Test & Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agentforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Install MCP server dependencies
        working-directory: mcp-server
        run: npm ci

      - name: Run MCP server linting
        working-directory: mcp-server
        run: npm run lint

      - name: Run MCP server tests
        working-directory: mcp-server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agentforge_test
        run: npm run test

      - name: Build MCP server
        working-directory: mcp-server
        run: npm run build

      - name: Cache MCP server artifact
        uses: actions/cache@v3
        with:
          path: mcp-server/dist
          key: mcp-server-${{ github.sha }}

  # Integration Testing
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test-build, frontend-test-build, mcp-test-build]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agentforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start integration test environment
        run: |
          cp infrastructure/docker-compose.yml docker-compose.test.yml
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8081/actuator/health; do sleep 5; done'

      - name: Run integration tests
        run: |
          # Run API integration tests
          npm run test:integration

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Docker Image Build and Push
  docker-build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, quality-compliance, backend-test-build, frontend-test-build, mcp-test-build, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend, mcp-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Restore cache for ${{ matrix.service }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.service }}/target
            ${{ matrix.service }}/dist
            ${{ matrix.service }}/node_modules
          key: ${{ matrix.service }}-${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$STAGING_SSH_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          
          # Deploy to staging server
          ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST '
            cd /opt/agentforge &&
            git pull origin main &&
            docker-compose -f infrastructure/production/docker-compose.prod.yml pull &&
            docker-compose -f infrastructure/production/docker-compose.prod.yml up -d
          '

      - name: Run staging health checks
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          timeout 300 bash -c 'until curl -f $STAGING_URL/health; do sleep 10; done'
          curl -f $STAGING_URL/api/actuator/health

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$PRODUCTION_SSH_KEY" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key
          
          # Deploy to production server
          ssh -i ~/.ssh/production_key -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST '
            cd /opt/agentforge &&
            git fetch --tags &&
            git checkout ${{ github.ref_name }} &&
            ./infrastructure/production/deploy-production.sh deploy
          '

      - name: Run production health checks
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          timeout 300 bash -c 'until curl -f $PRODUCTION_URL/health; do sleep 10; done'
          curl -f $PRODUCTION_URL/api/actuator/health

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ AgentForge ${{ github.ref_name }} deployed to production successfully!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ AgentForge ${{ github.ref_name }} deployment to production failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor application health
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          # Monitor for 10 minutes after deployment
          for i in {1..60}; do
            echo "Health check $i/60..."
            if ! curl -f $PRODUCTION_URL/health; then
              echo "Health check failed!"
              exit 1
            fi
            sleep 10
          done

      - name: Generate deployment report
        run: |
          node .agent-os/tools/advanced-analytics-service.cjs
          echo "Deployment monitoring completed successfully"